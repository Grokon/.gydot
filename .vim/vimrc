"##############################################################"
" vim: set foldmarker={,} foldlevel=0 foldmethod=marker :
"
" GY Vim Configuration
"
" Grok Yon
"
" This is the personal Vim configuration of Grok Yon.
"
" File: vimrc
"
"##############################################################"


set nocompatible                                        " be iMproved (Must be first line)

" Windows Compatible {
    " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
    " across (heterogeneous) systems easier.
    if has('win32') || has('win64')
        set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME
    else
        set shell=/bin/sh
    endif


" Load Plugins (Vundle) --------------------------------------------------- {{{

    if filereadable(expand("~/.vim/plugins.vim"))
        source ~/.vim/plugins.vim
    endif

" }}}



" Basic options ----------------------------------------------------------- {{{

    filetype plugin indent on                           " Automatically detect file types.

    syntax on                                           " turn on syntax highlighting
    set background=dark                                 " Assume a dark background


    set mouse=a                                         " Automatically enable mouse usage
    set mousehide                                       " Hide the mouse cursor while typing

    scriptencoding utf-8
    set encoding=utf-8

    "set autowrite                                      " Automatically write a file when leaving a modified buffer
    set shortmess+=filmnrxoOtT                          " Abbrev. of messages (avoids 'hit enter')
    set viewoptions=folds,options,cursor,unix,slash     " Better Unix / Windows compatibility
    set virtualedit+=block                              " Allow for cursor beyond last character (onemore)
    set history=1000                                    " Store a ton of history (default is 20)
    "set spell                                          " Spell checking on
    set hidden                                          " не выгружать буфер когда переключаешься на другой

    set iskeyword-=.                                    " '.' is an end of word designator
    set iskeyword-=#                                    " '#' is an end of word designator
    set iskeyword-=-                                    " '-' is an end of word designator



    " http://vim.wikia.com/wiki/Restore_cursor_to_file_position_in_previous_editing_session
    " Restore cursor to file position in previous editing session
        function! ResCur()
            if line("'\"") <= line("$")
                normal! g`"
                return 1
            endif
        endfunction

        augroup resCur
            autocmd!
            autocmd BufWinEnter * call ResCur()
        augroup END

" }}}


" Setting up the backups -------------------------------------------------- {{{

    set backup                                          " enable backups
    set noswapfile                                      " не использовать своп-файл (в него скидываются открытые буферы)
    set undofile                                        " So is persistent undo ...
    set undolevels=1000                                 " Maximum number of changes that can be undone
    set undoreload=10000                                " Maximum number lines to save for undo on a buffer reload

    set undodir=$HOME/.vim/tmp/undo//                   " undo files
    set backupdir=$HOME/.vim/tmp/backup//               " backups
    set directory=$HOME/.vim/tmp/swap//                 " swap files

    " Make those folders automatically if they don't already exist.
        if !isdirectory(expand(&undodir))
            call mkdir(expand(&undodir), "p")
        endif

        if !isdirectory(expand(&backupdir))
            call mkdir(expand(&backupdir), "p")
        endif

        if !isdirectory(expand(&directory))
            call mkdir(expand(&directory), "p")
        endif

" }}}


" Vim UI ------------------------------------------------------------------ {{{

    " Set colorcheme
        if filereadable(expand("~/.vim/bundle/vim-colorschemes/colors/zenburn.vim"))
            colors zenburn
        endif


    set tabpagemax=15                                   " Only show 15 tabs
    set showmode                                        " show current mode down the bottom
    set cursorline                                      " Highlight current line - подсветка строки и колонки курсора
    highlight clear SignColumn                          " SignColumn should match background
    highlight clear LineNr                              " Current line number row will have same background color in relative mode
    "highlight clear CursorLineNr                       " Remove highlight color from current line number

    if has('cmdline_info')
        set ruler                                               " show the cursor position all the time
        set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)      " A ruler on steroids
        set showcmd                                             " Show partial commands in status line and
                                                                " Selected characters/lines in visual mode
                                                                " показывать незавершенные команды в статусбаре (автодополнение ввода)
    endif


    if has('statusline')
        set laststatus=2

        " Broken down into easily includeable segments
        set statusline=%<%f\                                    " Filename
        set statusline+=%w%h%m%r                                " Options
        set statusline+=%{fugitive#statusline()}                " Git Hotness
        set statusline+=\ [%{&ff}/%Y]                           " Filetype
        set statusline+=\ [%{getcwd()}]                         " Current dir
        set statusline+=%=%-14.(%l,%c%V%)\ %p%%                 " Right aligned file nav info
    endif

    set backspace=indent,eol,start                              " allow backspacing over everything in insert mode
    set linespace=0                                             " No extra spaces between rows
    set nu                                                      " show line numbers
    set showmatch                                               " Show matching brackets/parenthesis показывать первую парную скобку
    set foldenable                                              " Auto fold code

    " Display tabs and trailing spaces
    set list                                                    " включить подсветку
    set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮            " установить символы, которыми будет осуществляться подсветка

" }}}


" Searching and movement -------------------------------------------------- {{{

    set incsearch                           " do incremental searching
    set hlsearch                            " hilight searches by default
    set winminheight=0                      " Windows can be 0 line high
    set ignorecase                          " Case insensitive search - поиск без учёта регистра символов
    set smartcase                           " Case sensitive when uc present
                                            " если искомое выражения содержит символы в верхнем регистре -
                                            " ищет с учётом регистра, иначе - без учёта

    "vertical/horizontal scroll off settings
    set scrolljump=5                        " Lines to scroll when cursor leaves screen
    set scrolloff=3                         " сколько строк внизу и вверху экрана показывать при скроллинге
    set sidescroll=1
    set sidescrolloff=10

" }}}


" Formatting -------------------------------------------------------------- {{{

    set nowrap                              " Do not wrap long lines

    set shiftwidth=4                        " размер отступов (нажатие на << или >>)
    set expandtab                           " преобразовать табуляцию в пробелы
    set tabstop=4                           " ширина табуляции
    set softtabstop=4                       " ширина 'мягкого' таба
    set nojoinspaces                        " Prevents inserting two spaces after punctuation on a join (J)
    set splitright                          " Puts new vsplit windows to the right of the current
    set splitbelow                          " Puts new split windows to the bottom of the current

    "set matchpairs+=<:>                    " Match, to be used with % показывать совпадающие скобки для HTML-тегов
     set pastetoggle=<F12>                  " pastetoggle (sane indentation on pastes)

    set autoindent                          " ai - включить автоотступы (копируется отступ предыдущей строки)
    set smartindent                         " Do smart autoindenting when starting a new line
    set copyindent                          " Copy the structure of the existing lines indent

" }}}




" }}}


" Wildmenu completion ----------------------------------------------------- {{{

set wildmenu					                 " enable ctrl-n and ctrl-p to scroll thru matches
set wildmode=list:longest			             " make cmdline tab completion similar to bash

set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit

set wildignore+=*.luac                           " Lua byte code

set wildignore+=migrations                       " Django migrations
set wildignore+=*.pyc                            " Python byte code

set wildignore+=*.orig                           " Merge resolution files

" Clojure/Leiningen
set wildignore+=classes
set wildignore+=lib

" }}}

" Line Return {{{

" Make sure Vim returns to the same line when you reopen a file.
" Thanks, Amit
augroup line_return
    au!
    au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
augroup END

" }}}



" Environments (GUI/Console) ---------------------------------------------- {{{

if has('gui_running')
    " GUI Vim

    set lines=50 columns=125                " 40 lines of text instead of 24

    " Remove all the UI cruft
    set go-=T                   " Remove the toolbar
    set go-=l
    set go-=L
    set go-=r                   " remove right-hand scroll bar
    set go-=R

    highlight SpellBad term=underline gui=undercurl guisp=Orange

    " Different cursors for different modes.
    "set guicursor=n-c:block-Cursor-blinkon0
    "set guicursor+=v:block-vCursor-blinkon0
    "set guicursor+=i-ci:ver20-iCursor

    if has("gui_macvim")
        " Full screen means FULL screen
        set fuoptions=maxvert,maxhorz

        set guifont=Menlo\ Regular\ for\ Powerline:h12

        " Use the normal HIG movements, except for M-Up/Down
        let macvim_skip_cmd_opt_movement = 1
        no   <D-Left>       <Home>
        no!  <D-Left>       <Home>
        no   <M-Left>       <C-Left>
        no!  <M-Left>       <C-Left>

        no   <D-Right>      <End>
        no!  <D-Right>      <End>
        no   <M-Right>      <C-Right>
        no!  <M-Right>      <C-Right>

        no   <D-Up>         <C-Home>
        ino  <D-Up>         <C-Home>
        imap <M-Up>         <C-o>{

        no   <D-Down>       <C-End>
        ino  <D-Down>       <C-End>
        imap <M-Down>       <C-o>}

        imap <M-BS>         <C-w>
        inoremap <D-BS>     <esc>my0c`y
    else
        " Non-MacVim GUI, like Gvim
        set guifont=Andale_Mono:h10,Menlo:h10,Consolas:h10,Courier_New:h10

    end
else
    " Console Vim
    " For me, this means iTerm2, possibly through tmux
    if &term == 'xterm' || &term == 'screen'
        set t_Co=256            " Tell the term has 256 colors
    endif
endif

" }}}




"----------

"setlocal spell spelllang=ru_yo,en_us
" циклическое переключение спелл-чекера (взято с www.opennet.ru/base/X/vim_orfo.txt.html)
if has("spell")
"   По умолчанию проверка орфографии выключена.
    setlocal spell spelllang=
    setlocal nospell
    "
    function ChangeSpellLang()
        if &spelllang =~ "en_us"
            setlocal spell spelllang=ru
            echo "spelllang: ru"
        elseif &spelllang =~ "ru"
            setlocal spell spelllang=
            setlocal nospell
            echo "spelllang: off"
        else
            setlocal spell spelllang=en_us
            echo "spelllang: en"
        endif
    endfunc

    " map spell on/off for English/Russian
    map <F11> <Esc>:call ChangeSpiellLang()<CR>
    " limit it to just the top 10 items
    set sps=best,10
endif

" Эту небольшую функцию можно вставить  в свой .vimrc и все. По нажатию
" F11 будут попеременно включаться Русский, Английски, или вообще
" выключаться проверка орфографии. Все неправильно написанные слова будут
" подсвечены. Теперь при наведении на это слово курсора и нажатии z=
" выпадет менюшка, с возможными правильными вариантами. Как и везде слово
" можно добавить к словарю (zG), перейти к следующей (]z), предыдущей ([z)
" ошибке, пометить слово как ошибочное - zW.




" External Configurations {

    " Key Mappings
    source ~/.vim/mappings.vim

    " File Types
    source ~/.vim/filetypes.vim

    " Abbreviations
    source ~/.vim/abbreviations.vim

    " Customizations
    source ~/.vim/custom.vim

" }



" Автоматически перечитывать конфигурацию VIM после сохранения
autocmd! BufWritePost $MYVIMRC source $MYVIMRC
"" Если сохраняемый файл является файлом скрипта - сделать его исполняемым
"" au BufWritePost * if getline(1) =~ "^#!.*/bin/"|silent !chmod a+x %|endif
"" При открытии файла задавать для него соответствующий 'компилятор'
"autocmd! BufEnter *.pl compiler perl
"autocmd! BufEnter *.pm compiler perl
"autocmd! BufEnter *.lua compiler lua



" End of vimrc